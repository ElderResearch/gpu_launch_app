"""add relationship between user and activity_log tables

Revision ID: a3155d79ecf5
Revises: 7a52b660ceab
Create Date: 2020-02-29 20:59:55.163111

"""
from datetime import datetime
from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm, MetaData
from sqlalchemy.ext.declarative import declarative_base

# revision identifiers, used by Alembic.
revision = "a3155d79ecf5"
down_revision = "7a52b660ceab"
branch_labels = None
depends_on = None


def upgrade():

    try:
        op.rename_table("activity_log", "activity_log_temp")
        bind = op.get_bind()
        Base = declarative_base(bind=bind)
        Base.metadata.reflect()

        class ActivityLog(Base):
            __tablename__ = "activity_log"
            id = sa.Column(sa.String(64), primary_key=True)
            user_id = sa.Column(sa.Integer, sa.ForeignKey("user.id"), nullable=False)
            image_type = sa.Column(sa.String(8))
            num_gpus = sa.Column(sa.Integer)
            start_time = sa.Column(sa.DateTime, default=datetime.utcnow)
            stop_time = sa.Column(sa.DateTime, nullable=True)

        class User(Base):
            __tablename__ = "user"
            __table_args__ = {"extend_existing": True}
            id = sa.Column(sa.Integer, primary_key=True)
            username = sa.Column(sa.String(32), index=True, unique=True)
            password_hash = sa.Column(sa.String(128))
            last_seen = sa.Column(sa.DateTime, default=datetime.utcnow)
            containers = orm.relationship("ActivityLog", backref="user", lazy="dynamic")

        session = orm.Session(bind=bind)

        Base.metadata.create_all()
        Temp = Base.metadata.tables["activity_log_temp"]

        for log in session.query(Temp).all():
            user = session.query(User).filter_by(username=log.username).first()
            if user is None:
                user = User(username=log.username)
            log = ActivityLog(
                id=log.id,
                user=user,
                image_type=log.image_type,
                num_gpus=log.num_gpus,
                start_time=log.start_time,
                stop_time=log.stop_time,
            )
            session.add(log)
        session.commit()
        op.drop_table("activity_log_temp")
    except:
        session.rollback()
        op.drop_table("activity_log")
        op.rename_table("activity_log_temp", "activity_log")
        raise


def downgrade():
    try:
        op.rename_table("activity_log", "activity_log_temp")
        bind = op.get_bind()
        Base = declarative_base(bind=bind)
        Base.metadata.reflect()

        class ActivityLog(Base):
            __tablename__ = "activity_log"
            id = sa.Column(sa.String(64), primary_key=True)
            username = sa.Column(sa.String(32))
            image_type = sa.Column(sa.String(8))
            num_gpus = sa.Column(sa.Integer)
            start_time = sa.Column(sa.DateTime, default=datetime.utcnow)
            stop_time = sa.Column(sa.DateTime, nullable=True)

        session = orm.Session(bind=bind)

        Base.metadata.create_all()
        Temp = Base.metadata.tables["activity_log_temp"]
        User = Base.metadata.tables["user"]

        for log in session.query(Temp).all():
            user = session.query(User).filter_by(id=log.user_id).first()
            log = ActivityLog(
                id=log.id,
                username=user.username,
                image_type=log.image_type,
                num_gpus=log.num_gpus,
                start_time=log.start_time,
                stop_time=log.stop_time,
            )
            session.add(log)
        session.commit()
        op.drop_table("activity_log_temp")
    except:
        session.rollback()
        op.drop_table("activity_log")
        op.rename_table("activity_log_temp", "activity_log")
        raise

    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_constraint(None, "activity_log", type_="foreignkey")
    # op.drop_column("activity_log", "user_id")
    # ### end Alembic commands ###
